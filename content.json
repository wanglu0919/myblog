{"meta":{"title":"猴哥的Blog","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"优雅的提交Git Message","slug":"git-message","date":"2019-01-07T07:49:26.000Z","updated":"2019-01-07T08:36:19.000Z","comments":false,"path":"2019/01/07/git-message/","link":"","permalink":"http://yoursite.com/2019/01/07/git-message/","excerpt":"","text":"为什么需要降低Review成本，可以明确知道本次提交的改变和影响规范整个Team的提交习惯，对技术素养的养成有益可以通过统一工具，抽取规范的message自动形成change log GitHub Angular Demo 目前Github的Angular项目，就是完全采用规范的Git Message来进行日常的提交管理和发布管理的，下面是这个项目的Commit记录，和自动根据commit生成的change log 遵循什么规范目前，使用较多的是AngularJS规范 1234567 # 包括三个部分：Header，Body 和 Footer &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt; Header 包括三个字段：type（必需）、scope（可选）和subject（必需） 任何一行都不能超过100个字符 type用于说明 commit 的类别，类型包含如下几种 123456789101112131415161718192021222324252627282930313233343536373839404142feat: A new featurefix: A bug fixdocs: Documentation only changesstyle: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)refactor: A code change that neither fixes a bug nor adds a featureperf: A code change that improves performancetest: Adding missing or correcting existing testschore: Changes to the build process or auxiliary tools and libraries such as documentation generationrevert: Reverts a previous commitbuild: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs) 如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况由你决定，要不要放入 Change log。 ``` * scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同* subject subject是 commit 目的的简短描述* Body Body 部分是对本次 commit 的详细描述，可以分成多行* Footer Footer 部分只用于两种情况* 不兼容变动 如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法* 关闭问题 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue。 如：Closes #123, #245, #992* 工具约束 我们的目标还是要通过工具生成和约束 * Commitizen commitizen/cz-cli 代替git commit 我们需要借助它提供的 git cz 命令替代我们的 git commit 命令, 帮助我们生成符合规范的 commit message 如何安装，在安装之前请先安装npm全局安装 commitizen npm install commitizen -g 12除此之外, 我们还需要为 commitizen 指定一个 Adapter 比如: cz-conventional-changelog (一个符合 Angular团队规范的 preset). 使得 commitizen 按照我们指定的规范帮助我们生成 commit message 进入到我们项目的根目录 cd your_repo_root_path 初始化package.jsonnpm init –yes 为commitizen指定适配器commitizen init cz-conventional-changelog –save-dev –save-exact 123456 现在我们就可以用git cz去进行提交了 ![22](git-message/3.png) * Standard Version 通过以上工具的帮助, 我们的工程 commit message 应该是符合Angular团队那套，这样也便于我们借助standard-version这样的工具, 自动生成 CHANGELOG, 甚至是语义化的版本号(Semantic Version) # 在项目根目录 npm install --save-dev standard-version # 在scripts结构体中加入执行脚本 { &quot;scripts&quot;: { &quot;release&quot;: &quot;standard-version&quot; } } # 生成changelog # 第一次生成 npm run release -- --first-release # 后续生成 npm run release 会在我们项目根目录生成一个CHANGELOG.md文件，如下所示 123456789* 项目中如何使用 如果我们已经完成了上述操作，会发现我们最终会得到一个package.json，我们只需要把package.json / commitlint.config.js提交版本库即可 把node_modules 和 package-lock.json都加入git忽略文件 下次再新clone项目后，直接在项目根目录运行npm install即可完成上述所有步骤 PS：NPM有时候国外镜像不稳定，可以切换淘宝镜像 npm config set registry https://registry.npm.taobao.org ```","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"私服","slug":"私服","permalink":"http://yoursite.com/tags/私服/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"composer 私服搭建","slug":"php-composer","date":"2018-04-28T02:18:37.000Z","updated":"2019-01-07T07:02:50.000Z","comments":false,"path":"2018/04/28/php-composer/","link":"","permalink":"http://yoursite.com/2018/04/28/php-composer/","excerpt":"","text":"通过https://github.com/composer/satis 的web satisfy 方案进行搭建https://github.com/ludofleury/satisfy 搭建步骤如下： git clone https://github.com/ludofleury/satisfy /目标地址/Users/wanglu/work/slightech/hexo_work/source/_posts/hello-world.md 修改 docker-compose.yml 如下 1234567891011121314version: &apos;2&apos;services: satisfy: container_name: satisfy build: ./docker volumes: - .:/var/www/satisfy # - ./html:/var/www/html - ./ssh_key:/root/.ssh environment: APP_PATH: /var/www/satisfy ports: - &quot;10003:80&quot; - 修改自动构配置 docker/conf/cron.conf 1* * * * * root /usr/local/bin/php /var/www/satisfy/bin/console satisfy:rebuild /var/www/satisfy/satis.json /var/www/html &gt; /tmp/satis.log 启动服务docker-compose up -d 启动服务访问 homepage 查看 是否正常进入docker 容器，初始话配置 12345678910111213141516171819202122232425262728 1. 生成ssh key : ssh-keygen -t rsa -C &quot;GitLab&quot; -b 4096 2. 给ssh key 权限： chmod 600 ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa.pub chmod 644 ~/.ssh/known_hosts chmod 755 ~/.ssh 3.初始化配置satis.json 文件 &#123; &quot;name&quot;: &quot;Test Composer &quot;, &quot;homepage&quot;: &quot;http:\\/\\/mycomposer.com:10003&quot;, &quot;repositories&quot;: [ ], &quot;require-all&quot;: true, &quot;archive&quot;: &#123; &quot;directory&quot;: &quot;dist&quot;, &quot;format&quot;: &quot;tar&quot;, &quot;skip-dev&quot;: true, &quot;whitelist&quot;: [], &quot;blacklist&quot;: [], &quot;prefix-url&quot;: &quot;http:\\/\\/mycomposer.com:10003\\/&quot;, &quot;checksum&quot;: true &#125;, &quot;config&quot;: &#123;&#125;&#125; ``` * 在docker容器中执行命令看是否成功执行 root /usr/local/bin/php /var/www/satisfy/bin/console satisfy:rebuild /var/www/satisfy/satis.json /var/www/html &gt; /tmp/satis.log 123456789* 配置 gitlab deploy key 拷贝 ssh_key/id_rsa_pub 内容，添加至gitlab deploy rsa 内容处* 添加仓库代码地址http://mycomposer.com/admin/注意： 添加gitlab 仓库，类型请选择 VCS ，否则无法构建，添加后，等自动构建完成，访问homepage 可以看到生成的package信息* 使用仓库 在项目composer.json中添加 私服地址 配置如下 &quot;repositories&quot;: [{ &quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;http://mycomposer.com&quot; }] 添加包依赖 &quot;require&quot;: { &quot;test-sdk/test-sdk&quot;: &quot;1.0.0&quot; } 配置 http 允许，否则无法拉去http 私服包 &quot;config&quot; : { &quot;secure-http&quot;: false } 测试 composer update or composer install `","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"私服","slug":"私服","permalink":"http://yoursite.com/tags/私服/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-04-28T02:18:37.000Z","updated":"2018-04-28T02:18:37.000Z","comments":true,"path":"2018/04/28/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"后端标题测试","slug":"http://www.baidu.com","date":"2018-04-28T02:18:37.000Z","updated":"2018-04-28T06:27:47.000Z","comments":false,"path":"2018/04/28/http://www.baidu.com/","link":"","permalink":"http://yoursite.com/2018/04/28/http:/www.baidu.com/","excerpt":"","text":"卧槽我操 asdfasfasfsaf","categories":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}],"tags":[{"name":"区块链","slug":"区块链","permalink":"http://yoursite.com/tags/区块链/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}]}]}