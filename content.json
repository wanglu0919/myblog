{"meta":{"title":"猴哥的Blog","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"优雅的提交Git Message","slug":"git-message","date":"2019-01-07T07:49:26.000Z","updated":"2019-01-07T09:26:46.000Z","comments":false,"path":"2019/01/07/git-message/","link":"","permalink":"http://yoursite.com/2019/01/07/git-message/","excerpt":"","text":"为什么需要 降低Review成本，可以明确知道本次提交的改变和影响 规范整个Team的提交习惯，对技术素养的养成有益 可以通过统一工具，抽取规范的message自动形成change log GitHub Angular Demo 目前Github的Angular项目，就是完全采用规范的Git Message来进行日常的提交管理和发布管理的，下面是这个项目的Commit记录，和自动根据commit生成的change log 遵循什么规范 目前，使用较多的是AngularJS规范 1234567# 包括三个部分：Header，Body 和 Footer &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt; Header 包括三个字段：type（必需）、scope（可选）和subject（必需） 任何一行都不能超过100个字符 type用于说明 commit 的类别，类型包含如下几种 feat: A new feature fix: A bug fix docs: Documentation only changes style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor: A code change that neither fixes a bug nor adds a feature perf: A code change that improves performance test: Adding missing or correcting existing tests chore: Changes to the build process or auxiliary tools and libraries such as documentation generation revert: Reverts a previous commit build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs) 如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况由你决定，要不要放入 Change log。 scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同 subject subject是 commit 目的的简短描述 Body Body 部分是对本次 commit 的详细描述，可以分成多行 Footer Footer 部分只用于两种情况 不兼容变动 如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法 关闭问题 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue。 如：Closes #123, #245, #992 工具约束 我们的目标还是要通过工具生成和约束 Commitizen commitizen/cz-cli 代替git commit 我们需要借助它提供的 git cz 命令替代我们的 git commit 命令, 帮助我们生成符合规范的 commit message 如何安装，在安装之前请先安装npm 全局安装 commitizen npm install commitizen -g 除此之外, 我们还需要为 commitizen 指定一个 Adapter 比如: cz-conventional-changelog (一个符合 Angular团队规范的 preset). 使得 commitizen 按照我们指定的规范帮助我们生成 commit message # 进入到我们项目的根目录 cd your_repo_root_path # 初始化package.json npm init --yes # 为commitizen指定适配器 commitizen init cz-conventional-changelog --save-dev --save-exact 现在我们就可以用git cz去进行提交了 Standard Version 通过以上工具的帮助, 我们的工程 commit message 应该是符合Angular团队那套，这样也便于我们借助standard-version这样的工具, 自动生成 CHANGELOG, 甚至是语义化的版本号(Semantic Version) 1234567891011121314# 在项目根目录npm install --save-dev standard-version# 在scripts结构体中加入执行脚本&#123; &quot;scripts&quot;: &#123; &quot;release&quot;: &quot;standard-version&quot; &#125;&#125;# 生成changelog# 第一次生成npm run release -- --first-release# 后续生成npm run release会在我们项目根目录生成一个CHANGELOG.md文件，如下所示 项目中如何使用 如果我们已经完成了上述操作，会发现我们最终会得到一个package.json，我们只需要把package.json / commitlint.config.js提交版本库即可 把node_modules 和 package-lock.json都加入git忽略文件 下次再新clone项目后，直接在项目根目录运行npm install即可完成上述所有步骤 PS：NPM有时候国外镜像不稳定，可以切换淘宝镜像 1npm config set registry https://registry.npm.taobao.org","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"使用Jrebel 热部署方式提升开发效率","slug":"jrebel","date":"2019-01-07T07:49:26.000Z","updated":"2019-10-18T03:15:00.000Z","comments":false,"path":"2019/01/07/jrebel/","link":"","permalink":"http://yoursite.com/2019/01/07/jrebel/","excerpt":"","text":"1.IDEA 安装Jrebel 插件Prefrences-&gt;Plugins-&gt;Browse repositories → 搜索Jrebel 进行安装 如下图： 安装后重启IDEA 2.破解激活Jrebel licensing service server 处输入地址 http://139.199.89.239:1008/a13dce66-9520-4ddb-9134-3b3eab031749 地址后面的UUID，自己在线生成一个 http://www.ofmonkey.com/transfer/guid 邮箱随便输入 3.设置Jrebel 离线模式 s4.配置IDEA4.1勾选Build project automaticallyFile——Settings——Compiler,右侧找到勾选项。 4.2勾选compiler.automake.allow.when.app.running快捷键：CTRL + SHIFT + Alt + / 5.启动项目使用Jrebel 启动测试项目 6.重新build projectJrebel虽然可以自动reload更改的文件，但是通常需要等半分钟左右，我们可以手动进行build，避免没用的时间等待。 手动构建项目 Build→Build Project 可以测试，修改Controller 代码后，不用重启服务，刷新页面，立马生效。效率飞升！！！s","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}]},{"title":"Mysql 数据库备份与还原","slug":"数据库备份与还原命令","date":"2019-01-07T07:49:26.000Z","updated":"2019-10-18T02:35:02.000Z","comments":false,"path":"2019/01/07/数据库备份与还原命令/","link":"","permalink":"http://yoursite.com/2019/01/07/数据库备份与还原命令/","excerpt":"","text":"123456789备份数据库mysqldump -hhost -uxxx -pxxx --single-transaction dbname &gt; marvin_benifit.$(date +%Y-%m-%d).sql 备份表mysqldump -hhost -uxxx -pxxx dbname tablename &gt; ~/backup_table.sql执行SQL 文件 : mysql -hhost -uxxx -pxxx dbname &lt; ./benifit_sprint11.sql","categories":[{"name":"db","slug":"db","permalink":"http://yoursite.com/categories/db/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}],"keywords":[{"name":"db","slug":"db","permalink":"http://yoursite.com/categories/db/"}]},{"title":"SpringMVC Post 接口实现json 入参自动转换成 Bean","slug":"sprintboot-post-自动转换","date":"2019-01-07T07:49:26.000Z","updated":"2019-10-18T03:15:58.000Z","comments":false,"path":"2019/01/07/sprintboot-post-自动转换/","link":"","permalink":"http://yoursite.com/2019/01/07/sprintboot-post-自动转换/","excerpt":"","text":"1.列如下方代码是接口 是一个post 方法， data 是客户端的的json 对象。怎么实现自动转换呢？ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package com.slightech.marvin.api.visitor.app.controller;import com.google.common.collect.Maps;import com.slightech.marvin.api.doc.annotation.*;import com.slightech.marvin.api.doc.model.SupportClientType;import com.slightech.marvin.api.tools.api.constants.ApiConstant;import com.slightech.marvin.api.visitor.app.dto.CapacityPackageDTO;import com.slightech.marvin.api.visitor.app.dto.GetCapacityPackageListDTO;import com.slightech.marvin.api.visitor.app.dto.GetCapacityPayListDTO;import com.slightech.marvin.api.visitor.app.dto.InitBuildingCapacityPackageDTO;import com.slightech.marvin.api.visitor.app.response.GetPageDataListResponse;import com.slightech.marvin.api.visitor.app.response.GetPayListResponse;import com.slightech.marvin.api.visitor.app.service.CapacityPackageService;import com.slightech.marvin.api.visitor.app.utils.Constant;import com.slightech.marvin.api.visitor.app.vo.BusinessCapacityPackageVO;import com.slightech.marvin.api.visitor.app.vo.CapacityPackageVO;import com.slightech.marvin.api.visitor.app.vo.MiniPackagePayRuleVO;import lombok.val;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.io.IOException;import java.util.Arrays;import java.util.List;import java.util.Map;import java.util.Objects;/** * 容量套餐 * * @author willardwang * @date 2019/01/28 */@RequestMapping(value = &quot;package&quot;, produces = &quot;application/json;charset=UTF-8&quot;)@RestController@MarvinApiDoc(value = &quot;套餐&quot;, order = 996)public class CapacityPackageController extends BaseController &#123; private static Logger logger = LoggerFactory.getLogger(Constant.CAPACITY_PACKAGE_LOGGER_NAME); @Autowired private CapacityPackageService capacityPackageService; /** * 初始化套餐 */ @RequestMapping(value = &quot;init&quot;, method = RequestMethod.POST) public String initBuildingPackage(@RequestParam(&quot;data&quot;) InitBuildingCapacityPackageDTO initBuildingCapacityPackageDTO) throws IOException &#123; logParams(initBuildingCapacityPackageDTO); if (initBuildingCapacityPackageDTO.getBuildingId() == null || initBuildingCapacityPackageDTO.getBuildingId() == 0) &#123; logger.warn(&quot;缺少参数building_id&quot;); return buildResponseParamLack(); &#125; if (initBuildingCapacityPackageDTO.getPackageList() == null || initBuildingCapacityPackageDTO.getPackageList().isEmpty()) &#123; logger.warn(&quot;缺少参数套餐数据&quot;); return buildResponseParamLack(); &#125; capacityPackageService.initBuildingCapacityPackage(initBuildingCapacityPackageDTO); return buildResponseSuccess(); &#125;&#125; ` 2.自定义转换的Scanner 在Spring 启动的时候扫描Controller的接口方法，发现是data 方法的，自定义的了类，把当前转换类类型转入Set 中 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647 package com.slightech.marvin.api.tools.api.data;import com.slightech.marvin.api.tools.api.constants.ApiConstant;import org.springframework.beans.BeansException;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.stereotype.Component;import org.springframework.util.ReflectionUtils;import org.springframework.web.bind.annotation.RequestParam;import java.lang.reflect.Method;import java.lang.reflect.Parameter;import java.util.HashSet;import java.util.Set;/** * @author willardwang * @description data 自动转换 * @date 2019/05/24 */@Componentpublic class RequestJsonDataToBeanScanner implements BeanPostProcessor &#123; Set&lt;Class&gt; jsonToBeanClass = new HashSet&lt;&gt;(); @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; Method[] methods = ReflectionUtils.getAllDeclaredMethods(bean.getClass()); if (methods != null) &#123; for (Method method : methods) &#123; Parameter[] pms = method.getParameters(); for (int i =0 ; i &lt; pms.length; i++) &#123; Parameter parameter = pms[i]; RequestParam requestParam = parameter.getAnnotation(RequestParam.class); if (requestParam != null &amp;&amp; “data”.equals(requestParam.value())) &#123; String dataTypeName = parameter.getParameterizedType().getTypeName(); if (!dataTypeName.equals(&quot;java.lang.String&quot;)) &#123; jsonToBeanClass.add(method.getParameterTypes()[i]); &#125; &#125; &#125; &#125; &#125; return bean; &#125; public Set&lt;Class&gt; getJsonToBeanClass() &#123; return jsonToBeanClass; &#125;&#125; BaseController 中加入我自定义转换器 123456789101112131415161718192021222324252627282930313233 package com.slightech.marvin.api.tools.api;import com.fasterxml.jackson.core.JsonProcessingException;import com.slightech.marvin.api.tools.api.data.RequestJsonDataEditor;import com.slightech.marvin.api.tools.api.data.RequestJsonDataToBeanScanner;import com.slightech.marvin.api.tools.common.JsonUtil;import org.slf4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.annotation.InitBinder;import java.io.IOException;import java.util.Set;/** * @author liuyang */public abstract class BaseController &#123; @Autowired RequestJsonDataToBeanScanner requestJsonDataToBeanScanner; @InitBinder public void InitBinder(WebDataBinder binder) &#123; Set&lt;Class&gt; classSet = requestJsonDataToBeanScanner.getJsonToBeanClass(); for (Class clazz : classSet) &#123; RequestJsonDataEditor requestJsonDataEditor = new RequestJsonDataEditor(clazz); binder.registerCustomEditor(clazz, requestJsonDataEditor); &#125; &#125;&#125; ` 转换代码 123456789101112131415161718192021222324252627282930313233 package com.slightech.marvin.api.tools.api.data;import com.slightech.marvin.api.tools.common.JsonUtil;import java.beans.PropertyEditorSupport;import java.io.IOException;/** * @author willardwang * @description * @date 2019/05/16 */public class RequestJsonDataEditor extends PropertyEditorSupport &#123; private Class clazz; public RequestJsonDataEditor(Class clazz) &#123; this.clazz = clazz; &#125; @Override public String getAsText() &#123; return getValue().toString(); &#125; @Override public void setAsText(String text) throws IllegalArgumentException &#123; try &#123; setValue(JsonUtil.jsonStr2Bean(text, this.clazz)); &#125; catch (IOException e) &#123; throw new RuntimeException(text + &quot;data 转 bean 异常&quot;); &#125; &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}]},{"title":"discourse 社区部署","slug":"discourse_deploy","date":"2018-04-28T02:18:37.000Z","updated":"2019-01-07T09:42:01.000Z","comments":false,"path":"2018/04/28/discourse_deploy/","link":"","permalink":"http://yoursite.com/2018/04/28/discourse_deploy/","excerpt":"","text":"1.1 介绍 官网：https://www.discourse.org/ 源码地址：https://github.com/discourse/discourse 开发语言：ruby 1.2 部署步骤一、 环境安装部署环境： Ubuntu 16.04.1 LTS 安装docker-ce: sudo apt-get install docker-ce 安装git: sudo apt-install git 二、安装discourse mkdir /var/discourse git clone https://github.com/discourse/discourse_docker.git /var/discourse cd /var/discourse 三、启动安装discourse工具./discourse-setup 然后会提示让你回答以下问题： Hostname for your Discourse? [discourse.example.com]:Email address for admin account(s)? [me@example.com,you@example.com]:SMTP server address? [smtp.example.com]:SMTP port? [587]:SMTP user name? [user@example.com]:SMTP password? [pa$$word]:Let’s Encrypt account email? (ENTER to skip) [me@example.com]: 这里公司是注册了一个新的腾讯企业邮箱，此过程从略， 我填一个模板： Hostname : eosteam.orgEmail : noreply@eosteam.orgSMTP address : smtp.exmail.qq.comSMTP port : 25SMTP username : noreply@eosteam.orgSMTP password : Dxzb123 这将生成一个 app.yml 代表您的配置文件，然后启动引导程序。引导2-8分钟来建立你的discourse 完成安装 测试坑： SMTP 启用SSL的话，端口465 调试不通，建议25 端口，关闭SSL。 四、主要配置修改 主要配置文件位置：/var/discourse/containers/app.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100## this is the all-in-one, standalone Discourse Docker container template#### After making changes to this file, you MUST rebuild## /var/discourse/launcher rebuild app#### BE *VERY* CAREFUL WHEN EDITING!## YAML FILES ARE SUPER SUPER SENSITIVE TO MISTAKES IN WHITESPACE OR ALIGNMENT!## visit http://www.yamllint.com/ to validate this file as needed templates: - &quot;templates/postgres.template.yml&quot; - &quot;templates/redis.template.yml&quot; - &quot;templates/web.template.yml&quot; - &quot;templates/web.ratelimited.template.yml&quot;## Uncomment these two lines if you wish to add Lets Encrypt (https) #- &quot;templates/web.ssl.template.yml&quot; #- &quot;templates/web.letsencrypt.ssl.template.yml&quot; ## which TCP/IP ports should this container expose?## If you want Discourse to share a port with another webserver like Apache or nginx,## see https://meta.discourse.org/t/17247 for detailsexpose: - &quot;7788:80&quot; # http - &quot;443:443&quot; # https params: db_default_text_search_config: &quot;pg_catalog.english&quot; ## Set db_shared_buffers to a max of 25% of the total memory. ## will be set automatically by bootstrap based on detected RAM, or you can override db_shared_buffers: &quot;128MB&quot; ## can improve sorting performance, but adds memory usage per-connection #db_work_mem: &quot;40MB&quot; ## Which Git revision should this container use? (default: tests-passed) #version: tests-passed env: LANG: en_US.UTF-8 # DISCOURSE_DEFAULT_LOCALE: en ## How many concurrent web requests are supported? Depends on memory and CPU cores. ## will be set automatically by bootstrap based on detected CPUs, or you can override UNICORN_WORKERS: 2 ## TODO: The domain name this Discourse instance will respond to ## Required. Discourse will not work with a bare IP number. DISCOURSE_HOSTNAME: team.slightech.com:7788 ## Uncomment if you want the container to be started with the same ## hostname (-h option) as specified above (default &quot;$hostname-$config&quot;) #DOCKER_USE_HOSTNAME: true ## TODO: List of comma delimited emails that will be made admin and developer ## on initial signup example &apos;user1@example.com,user2@example.com&apos; DISCOURSE_DEVELOPER_EMAILS: &apos;timfan@slightech.com,willardwang@slightech.com&apos; ## TODO: The SMTP mail server used to validate new accounts and send notifications # SMTP ADDRESS, username, and password are required # WARNING the char &apos;#&apos; in SMTP password can cause problems! DISCOURSE_SMTP_ADDRESS: smtp.mxhichina.com DISCOURSE_SMTP_PORT: 25 DISCOURSE_SMTP_USER_NAME: noreply@slightech.com DISCOURSE_SMTP_PASSWORD: &quot;YAcgj7wXXXXXX&quot; DISCOURSE_SMTP_ENABLE_START_TLS: false # (optional, default true) ## If you added the Lets Encrypt template, uncomment below to get a free SSL certificate #LETSENCRYPT_ACCOUNT_EMAIL: me@example.com ## The CDN address for this Discourse instance (configured to pull) ## see https://meta.discourse.org/t/14857 for details #DISCOURSE_CDN_URL: //discourse-cdn.example.com ## The Docker container is stateless; all data is stored in /sharedvolumes: - volume: host: /var/discourse/shared/standalone guest: /shared - volume: host: /var/discourse/shared/standalone/log/var-log guest: /var/log ## Plugins go here## see https://meta.discourse.org/t/19157 for detailshooks: after_code: - exec: cd: $home/plugins cmd: - git clone https://github.com/discourse/docker_manager.git ## Any custom commands to run after buildingrun: - exec: echo &quot;Beginning of custom commands&quot; ## If you want to set the &apos;From&apos; email address for your first registration, uncomment and change: ## After getting the first signup email, re-comment the line. It only needs to run once. #- exec: rails r &quot;SiteSetting.notification_email=&apos;info@unconfigured.discourse.org&apos;&quot; - exec: echo &quot;End of custom commands&quot; expose: docker 端口映射 可以自行修改DISCOURSE_DEVELOPER_EMAILS： 初始化管理员邮箱，需要配置好SMTP：发件箱信息需要配置好，测试25 关闭SSL，才可以发送，开启SSL 465 端口发送不通。 五、启动，激活管理员./launcher start app 访问：http://team.slightech.com:7788 首次会跳出管理员激活，如果邮箱不通无法激活管理员，可以通过以下名称进行管理员激活 ./launcher enter app rake admin:create 输入管理员邮箱，密码进行激活，激活后可以登录论坛进行引导配置。 六、论坛迁移如果论坛需要迁移服务器，打包 /var/discourse 目录，上传到指定服务器，解压。 安装好docker ，git ，输入命令 ./launcher rebuild app 即可完成 app 迁移","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"论坛","slug":"论坛","permalink":"http://yoursite.com/tags/论坛/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"composer 私服搭建","slug":"php-composer","date":"2018-04-28T02:18:37.000Z","updated":"2019-01-07T09:13:16.000Z","comments":false,"path":"2018/04/28/php-composer/","link":"","permalink":"http://yoursite.com/2018/04/28/php-composer/","excerpt":"","text":"通过https://github.com/composer/satis 的web satisfy 方案进行搭建https://github.com/ludofleury/satisfy 搭建步骤如下： git clone https://github.com/ludofleury/satisfy /目标地址/Users/wanglu/work/slightech/hexo_work/source/_posts/hello-world.md 修改 docker-compose.yml 如下 1234567891011121314version: &apos;2&apos;services: satisfy: container_name: satisfy build: ./docker volumes: - .:/var/www/satisfy # - ./html:/var/www/html - ./ssh_key:/root/.ssh environment: APP_PATH: /var/www/satisfy ports: - &quot;10003:80&quot; - 修改自动构配置 docker/conf/cron.conf 1* * * * * root /usr/local/bin/php /var/www/satisfy/bin/console satisfy:rebuild /var/www/satisfy/satis.json /var/www/html &gt; /tmp/satis.log 启动服务docker-compose up -d 启动服务访问 homepage 查看 是否正常进入docker 容器，初始话配置 生成ssh key : ssh-keygen -t rsa -C “GitLab” -b 4096 给ssh key 权限： chmod 600 ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa.pub chmod 644 ~/.ssh/known_hosts chmod 755 ~/.ssh 初始化配置satis.json 文件 { &quot;name&quot;: &quot;Test Composer &quot;, &quot;homepage&quot;: &quot;http:\\/\\/mycomposer.com:10003&quot;, &quot;repositories&quot;: [ ], &quot;require-all&quot;: true, &quot;archive&quot;: { &quot;directory&quot;: &quot;dist&quot;, &quot;format&quot;: &quot;tar&quot;, &quot;skip-dev&quot;: true, &quot;whitelist&quot;: [], &quot;blacklist&quot;: [], &quot;prefix-url&quot;: &quot;http:\\/\\/mycomposer.com:10003\\/&quot;, &quot;checksum&quot;: true }, &quot;config&quot;: {} } 在docker容器中执行命令看是否成功执行 1root /usr/local/bin/php /var/www/satisfy/bin/console satisfy:rebuild /var/www/satisfy/satis.json /var/www/html &gt; /tmp/satis.log 配置 gitlab deploy key拷贝 ssh_key/id_rsa_pub 内容，添加至gitlab deploy rsa 内容处 添加仓库代码地址http://mycomposer.com/admin/注意： 添加gitlab 仓库，类型请选择 VCS ，否则无法构建，添加后，等自动构建完成，访问homepage 可以看到生成的package信息 使用仓库 在项目composer.json中添加 私服地址 配置如下“repositories”: [{ “type”: “composer”, “url”: “http://mycomposer.com&quot;}]添加包依赖 “require”: { “test-sdk/test-sdk”: “1.0.0”}配置 http 允许，否则无法拉去http 私服包 “config” : { “secure-http”: false}测试 composer update or composer install","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"私服","slug":"私服","permalink":"http://yoursite.com/tags/私服/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]}]}